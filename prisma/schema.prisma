// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  email      String?   @unique
  password   Password?
  // tracks     Track[]
}

model Password {
  hash   String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String  @unique
}

// model Track {
//   id         String         @id @default(uuid())
//   created_at DateTime       @default(now())
//   updated_at DateTime       @updatedAt
//   owner      User           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   ownerId    String
//   title      String?
//   versions   TrackVersion[]
// }

// model TrackVersion {
//   id         String     @id @default(uuid())
//   created_at DateTime   @default(now())
//   updated_at DateTime   @updatedAt
//   track      Track      @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   trackId    String
//   AudioFile  AudioFile?
// }

// model AudioFile {
//   id             String       @id @default(uuid())
//   created_at     DateTime     @default(now())
//   updated_at     DateTime     @updatedAt
//   version        TrackVersion @relation(fields: [trackVersionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   trackVersionId String       @unique
// }
