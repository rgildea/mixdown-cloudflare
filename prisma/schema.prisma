// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  email       String       @unique
  username    String       @unique @default("")
  name        String?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  image       UserImage?
  tracks      Track[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Session {
  id             String   @id @default(uuid())
  expirationDate DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Track {
  id          String         @id @default(uuid())
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId   String
  title       String?
  description String?
  versions    TrackVersion[]
}

model TrackVersion {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  track      Track      @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackId    String
  version    Int        @default(autoincrement())
  title      String
  audioFile  AudioFile?

  @@unique([id, version])
}

model AudioFile {
  id             String        @id @default(uuid())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  version        TrackVersion? @relation(fields: [trackVersionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackVersionId String?       @unique
  fileKey        String        @unique
  fileName       String
  fileSize       Int
  contentType    String
  url            String
  duration       Int?
}
